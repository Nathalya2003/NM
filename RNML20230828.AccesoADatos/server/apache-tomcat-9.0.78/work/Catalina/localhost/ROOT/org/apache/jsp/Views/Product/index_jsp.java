/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-26 03:20:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Views.Product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Base64;
import fixnimartjava.entitdadesdenegocio.Product;
import java.util.ArrayList;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Base64");
    _jspx_imports_classes.add("fixnimartjava.entitdadesdenegocio.Product");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
 ArrayList<Product> products = (ArrayList<Product>) request.getAttribute("products");
    int numPage = 1;
    int numReg = 10;
    int countReg = 0;
    if (products == null) {
        products = new ArrayList();
    } else if (products.size() > numReg) {
        double divNumPage = (double) products.size() / (double) numReg;
        numPage = (int) Math.ceil(divNumPage);
    }
    String strTop_aux = request.getParameter("top_aux");
    int top_aux = 10;
    if (strTop_aux != null && strTop_aux.trim().length() > 0) {
        top_aux = Integer.parseInt(strTop_aux);
    }

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>        \n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Views/Shared/title.jsp", out, false);
      out.write("\n");
      out.write("        <title>Buscar Producto</title>\n");
      out.write("        <style>\n");
      out.write("            body{\n");
      out.write("                text-align: center;\n");
      out.write("            }\n");
      out.write("            .button{\n");
      out.write("                border: 1px solid;\n");
      out.write("                text-decoration: none;\n");
      out.write("                color: black;\n");
      out.write("                border-radius: 5px;\n");
      out.write("                background: var(--backgroungButton);\n");
      out.write("                padding: 3px;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Views/Shared/headerBody.jsp", out, false);
      out.write("  \n");
      out.write("        <main class=\"container\">   \n");
      out.write("            <h5>Productos</h5>\n");
      out.write("\n");
      out.write("            <ul id=\"productsInventory\" class=\"dropdown-content\">\n");
      out.write("                <b class=\"grey\">Generar...</b>\n");
      out.write("                <li>\n");
      out.write("                    <a href=\"Documents?generate=productsInventoryPDF\"\n");
      out.write("                       class=\"red-text\">PDF</a>\n");
      out.write("                </li>\n");
      out.write("                <li>\n");
      out.write("                    <a href=\"Documents?generate=productsInventoryWORD\"\n");
      out.write("                       class=\"blue-text\">WORD</a>\n");
      out.write("                </li>\n");
      out.write("                <li>\n");
      out.write("                    <a href=\"Documents?generate=productsInventoryEXCEL\"\n");
      out.write("                       class=\"green-text\">EXCEL</a>\n");
      out.write("                </li>\n");
      out.write("            </ul>\n");
      out.write("            <a class=\"btn dropdown-button green\"\n");
      out.write("               href=\"#\"\n");
      out.write("               data-activates=\"productsInventory\"> Inventario de producto\n");
      out.write("                <i class=\"mdi-navigation-arrow-drop-down right\"></i>\n");
      out.write("            </a>\n");
      out.write("\n");
      out.write("\n");
      out.write("            <table class=\"m2 z-depth-5 striped highlight centered responsive-table\" >\n");
      out.write("                <thead>\n");
      out.write("                    <tr>                \n");
      out.write("                        <th>Nombre</th>  \n");
      out.write("                        <th>Descripcion</th> \n");
      out.write("                        <th>Precio</th>  \n");
      out.write("                        <th>Stock</th>  \n");
      out.write("                        <th>Codigo de barra</th>   \n");
      out.write("                        <!--<th>Imagen</th>-->   \n");
      out.write("\n");
      out.write("                        <th>Acciones</th>\n");
      out.write("                    </tr>\n");
      out.write("                </thead>\n");
      out.write("                <tbody>                           \n");
      out.write("                    ");

                        double total = 0.0;
                        for (Product product : products) {
                            int tempNumPage = numPage;
                            if (numPage > 1) {
                                countReg++;
                                double divTempNumPage = (double) countReg / (double) numReg;
                                tempNumPage = (int) Math.ceil(divTempNumPage);
                            }
                            double itemTotal = (double) product.getPrice() * product.getStock();
                            total += itemTotal;
                    
      out.write("\n");
      out.write("                    <tr data-page=\"");
      out.print( tempNumPage);
      out.write("\">\n");
      out.write("                        <td>");
      out.print(product.getName());
      out.write("</td>  \n");
      out.write("                        <td>");
      out.print(product.getDescription());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print(product.getPrice());
      out.write("</td>  \n");
      out.write("                        <td>");
      out.print(product.getStock());
      out.write("</td>\n");
      out.write("                        <td>");
      out.print(product.getBarCode());
      out.write("</td> \n");
      out.write("\n");
      out.write("                        <!-- <td><img alt=\"img\" src=\"data:image/jpeg;base64,<//%=Base64.getEncoder().encodeToString(product.getProductImage())%>\" width=\"75\" height=\"75\"/></td> -->\n");
      out.write("                        <td>\n");
      out.write("                            <ul id=\"dropdown-");
      out.print(product.getProductId());
      out.write("\" class=\"dropdown-content\" >\n");
      out.write("                                <li>\n");
      out.write("                                    <a href=\"Product?accion=edit&productId=");
      out.print(product.getProductId());
      out.write("\" title=\"Modificar\" class=\"waves-effect waves-light center-align green white-text\">\n");
      out.write("                                        <i class=\"material-icons\">edit</i>\n");
      out.write("                                    </a>\n");
      out.write("                                </li>\n");
      out.write("                                <li>\n");
      out.write("                                    <a href=\"Product?accion=details&productId=");
      out.print(product.getProductId());
      out.write("\" title=\"Ver\" class=\"waves-effect waves-light center-align grey white-text\">\n");
      out.write("                                        <i class=\"material-icons\">description</i>\n");
      out.write("                                    </a>\n");
      out.write("                                </li>\n");
      out.write("                            </ul>\n");
      out.write("                            <a class=\"btn dropdown-button cyan\"\n");
      out.write("                               href=\"#\"\n");
      out.write("                               data-activates=\"dropdown-");
      out.print(product.getProductId());
      out.write("\"> Acciones\n");
      out.write("                                <i class=\"mdi-navigation-arrow-drop-down right\"></i></a>\n");
      out.write("                        </td>                          \n");
      out.write("                    </tr>\n");
      out.write("                    ");
}
      out.write("                                                       \n");
      out.write("                </tbody>\n");
      out.write("                <tfoot>\n");
      out.write("                    <tr>\n");
      out.write("                        <th colspan=\"3\"></th>\n");
      out.write("                        <th>Total: </th>\n");
      out.write("                        <th>$ ");
      out.print( String.format("%.2f", total));
      out.write("</th>\n");
      out.write("                    </tr>\n");
      out.write("                </tfoot>\n");
      out.write("\n");
      out.write("            </table>\n");
      out.write("\n");
      out.write("            <div class=\"row\">\n");
      out.write("                <div class=\"col l12 s12\">\n");
      out.write("                    <div style=\"overflow: auto\">\n");
      out.write("\n");
      out.write("                    </div>      \n");
      out.write("                    <div style=\"display: flex;flex-direction: column;align-items: center;\">\n");
      out.write("                        <h3>Productos en stock</h3>\n");
      out.write("                        <canvas id=\"myChart\" style=\"max-width:300px; max-height:400px;\"></canvas>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("            </div>             \n");
      out.write("            <div class=\"row\">\n");
      out.write("                <div class=\"col l12 s12\">\n");
      out.write("                    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Views/Shared/paginacion.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("numPage", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf( numPage), request.getCharacterEncoding()), out, false);
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("\n");
      out.write("        </main>\n");
      out.write("        <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Views/Shared/footerBody.jsp", out, false);
      out.write("      \n");
      out.write("    </body>\n");
      out.write("\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        // Obtén los datos necesarios para la gráfica del objeto JSON directamente en JavaScript\n");
      out.write("        // Creamos arrays para almacenar los nombres y los datos del gráfico\n");
      out.write("        var _chartNames = [\n");
      out.write("        ");
      out.write("\n");
      out.write("        ");
 for (int i = 0; i < products.size(); i++) {
      out.write("\n");
      out.write("        \"");
      out.print( products.get(i).getName());
      out.write("\"\n");
      out.write("        ");
 if (i < products.size() - 1) { 
      out.write(',');
      out.write(' ');
 } 
      out.write("\n");
      out.write("        ");
 } 
      out.write("\n");
      out.write("        ];\n");
      out.write("\n");
      out.write("\n");
      out.write("        var _chartData = [\n");
      out.write("        ");
      out.write("\n");
      out.write("        ");
 for (int i = 0; i < products.size(); i++) {
      out.write("\n");
      out.write("        ");
      out.print( products.get(i).getStock());
      out.write("\n");
      out.write("        ");
 if (i < products.size() - 1) { 
      out.write(',');
      out.write(' ');
 } 
      out.write("\n");
      out.write("        ");
 }
      out.write("\n");
      out.write("        ];\n");
      out.write("\n");
      out.write("\n");
      out.write("        // Generamos 10 colores diferentes para los gráficos y los almacenamos en un array\n");
      out.write("        var coloresArray = [];\n");
      out.write("        while (coloresArray.length < 10) {\n");
      out.write("            var nuevoColor = \"#\" + (Math.random().toString(16) + \"000000\").slice(2, 8);\n");
      out.write("            coloresArray.push(nuevoColor);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // Creamos la gráfica utilizando la librería Chart.js\n");
      out.write("        new Chart(\"myChart\", {\n");
      out.write("            type: \"doughnut\",\n");
      out.write("            data: {\n");
      out.write("                labels: _chartNames,\n");
      out.write("                datasets: [{\n");
      out.write("                        label: 'Stock',\n");
      out.write("                        backgroundColor: coloresArray,\n");
      out.write("                        data: _chartData\n");
      out.write("                    }]\n");
      out.write("            },\n");
      out.write("            options: {\n");
      out.write("                responsive: true,\n");
      out.write("                maintainAspectRatio: false\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
